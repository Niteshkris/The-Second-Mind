import os
import requests
import json
from langchain_community.chat_models import ChatOpenAI
from langchain.schema import HumanMessage

# Set the OpenRouter API key
OPENROUTER_API_KEY = "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"  # 🔹 Replace with your actual API key
API_URL = "https://openrouter.ai/api/v1/chat/completions"  # OpenRouter API endpoint

class SubAgent:
    """A sub-agent that can generate more sub-agents dynamically."""
    def __init__(self, role, model="mistralai/mistral-7b-instruct"):
        self.role = role
        self.model = model  # You can specify different models like 'gpt-4-turbo'
        self.sub_agents = {}

    def create_sub_agent(self, sub_role, model="mistralai/mistral-7b-instruct"):
        """Dynamically create a new sub-agent."""
        if sub_role not in self.sub_agents:
            print(f"🔹 Creating Sub-Agent: {sub_role}")
            self.sub_agents[sub_role] = SubAgent(sub_role, model)
        return self.sub_agents[sub_role]

    def get_response(self, user_query):
        """Generate a response using OpenRouter API."""
        try:
            print(f"🟢 {self.role} processing query...")
            headers = {
                "Authorization": f"Bearer {OPENROUTER_API_KEY}",
                "Content-Type": "application/json"
            }
            data = {
                "model": self.model,  # Set model (e.g., 'mistral', 'gpt-4-turbo')
                "messages": [{"role": "user", "content": user_query}]
            }
            response = requests.post(API_URL, headers=headers, data=json.dumps(data))

            if response.status_code == 200:
                return response.json()["choices"][0]["message"]["content"]
            else:
                return f"❌ API Error in {self.role}: {response.text}"

        except Exception as e:
            return f"❌ Error in {self.role}: {str(e)}"

class MasterAIAgent:
    """Master AI Orchestrator that manages multiple AI agents and sub-agents."""
    def __init__(self):
        self.agents = {
            "Fact_Checker": SubAgent("Fact_Checker"),
            "Summarizer": SubAgent("Summarizer", model="mistral"),
            "Sentiment_Analyzer": SubAgent("Sentiment_Analyzer")
        }

    def get_responses(self, user_query):
        """Get responses from all agents and their sub-agents."""
        responses = {}
        for agent_name, agent in self.agents.items():
            responses[agent_name] = agent.get_response(user_query)

            # Create sub-agents if query is complex
            if "analyze" in user_query.lower():
                sub_agent_name = f"{agent_name}_Deep_Analysis"
                print(f"🔹 Creating Sub-Agent: {sub_agent_name}")
                sub_agent = agent.create_sub_agent(sub_agent_name)
                responses[sub_agent_name] = sub_agent.get_response(user_query)

        return responses

    def rank_responses(self, responses):
        """Rank responses using OpenRouter AI."""
        ranking_prompt = "Rank these responses from best to worst:\n\n"
        for agent, response in responses.items():
            ranking_prompt += f"{agent}: {response}\n\n"

        print("🔹 Ranking responses...")
        try:
            headers = {
                "Authorization": f"Bearer {OPENROUTER_API_KEY}",
                "Content-Type": "application/json"
            }
            data = {
                "model": "mistralai/mistral-7b-instruct",  # Use a ranking-capable model
                "messages": [{"role": "user", "content": ranking_prompt}]
            }
            response = requests.post(API_URL, headers=headers, data=json.dumps(data))

            if response.status_code == 200:
                return response.json()["choices"][0]["message"]["content"]
            else:
                return f"❌ API Error in ranking: {response.text}"

        except Exception as e:
            return f"❌ Error in ranking responses: {str(e)}"

    def respond(self, user_query):
        """Get and rank responses, then return the best one."""
        print("\n🔵 Master Agent processing query...")
        responses = self.get_responses(user_query)
        ranked_response = self.rank_responses(responses)
        print("✅ Response ranking complete!")
        return ranked_response

# Run the system
orchestrator = MasterAIAgent()
user_input = input("📝 Ask something: ")
best_response = orchestrator.respond(user_input)
print("\n🔹 Best AI Response:\n", best_response)
